name: Build and Test in dev-cloud

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  workflow_dispatch:
    # Allows manual triggering of the workflow

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        if [ -f docker-requirements.txt ]; then pip install -r docker-requirements.txt; fi
        
    - name: Run static analysis
      run: |
        pip install pylint
        pylint --disable=C0111,C0103,C0303,C0301,W0511 src/redmine_mcpserver/modules/ src/redmine_mcpserver/*.py || true
        
    - name: Build Docker image
      run: |
        docker build -t redmine-mcp-server:${{ github.sha }} .
        
    - name: Save Docker image
      run: |
        docker save redmine-mcp-server:${{ github.sha }} > redmine-mcp-server-image.tar
        
    - name: Upload Docker image as artifact
      uses: actions/upload-artifact@v4
      with:
        name: docker-image
        path: redmine-mcp-server-image.tar
        
  test:
    needs: build
    runs-on: ubuntu-latest
    environment: dev-cloud
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Download Docker image
      uses: actions/download-artifact@v4
      with:
        name: docker-image
        
    - name: Load Docker image
      run: |
        docker load < redmine-mcp-server-image.tar
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        if [ -f docker-requirements.txt ]; then pip install -r docker-requirements.txt; fi
        
    - name: Run unit tests
      run: |
        echo "Running unit tests"
        python -m unittest discover -s tests -p "test_*.py" || true
        
    - name: Run validation tests
      env:
        REDMINE_URL: "https://redstone.redminecloud.net"
        REDMINE_API_KEY: ${{ secrets.REDMINE_API_KEY }}
        TEST_PROJECT: "p1"
        SERVER_MODE: "test"
      run: |
        echo "Running validation tests against Redmine issues in v1 project"
        python tests/validation_test.py
        
    - name: Run Docker container tests
      env:
        REDMINE_URL: "https://redstone.redminecloud.net"
        REDMINE_API_KEY: ${{ secrets.REDMINE_API_KEY }}
        TEST_PROJECT: "p1"
      run: |
        echo "Running Docker container tests in test mode"
        
        # Run the container in test mode with the p1 project
        docker run --name redmine-test \
                  -e REDMINE_URL="$REDMINE_URL" \
                  -e REDMINE_API_KEY="$REDMINE_API_KEY" \
                  -e SERVER_MODE="test" \
                  -e TEST_PROJECT="$TEST_PROJECT" \
                  -d redmine-mcp-server:${{ github.sha }}
        
        # Wait for tests to complete
        sleep 20
        
        # Check container logs
        docker logs redmine-test
        
        # Get exit code from container
        EXIT_CODE=$(docker inspect redmine-test --format='{{.State.ExitCode}}')
        
        # Clean up
        docker stop redmine-test || true
        docker rm redmine-test || true
        
        # Report result
        if [ "$EXIT_CODE" -eq "0" ]; then
          echo "Docker container tests passed"
        else
          echo "Docker container tests failed with exit code $EXIT_CODE"
          exit 1
        fi
        
  deploy:
    needs: test
    runs-on: ubuntu-latest
    environment: dev-cloud
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || github.ref == 'refs/heads/develop')
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Download Docker image
      uses: actions/download-artifact@v4
      with:
        name: docker-image
        
    - name: Load Docker image
      run: |
        docker load < redmine-mcp-server-image.tar
        
    - name: Create GitHub Release
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
      id: create_release
      uses: actions/create-release@latest
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        body: |
          Release v${{ github.run_number }} of Redmine MCP Server
          
          Build from commit: ${{ github.sha }}
          
          This release has been tested against the dev-cloud environment.
        draft: false
        prerelease: false
        
    - name: Update validation project with release info
      env:
        REDMINE_URL: "https://redstone.redminecloud.net"
        REDMINE_API_KEY: ${{ secrets.REDMINE_API_KEY }}
      run: |
        echo "Updating Redmine validation project with release information"
        python - <<EOF
        import os
        import sys
        import json
        import datetime
        from src.redmine_api import RedmineAPI
        
        # Get environment variables
        redmine_url = os.environ.get("REDMINE_URL")
        redmine_api_key = os.environ.get("REDMINE_API_KEY")
        
        if not redmine_url or not redmine_api_key:
            print("Redmine URL or API key not available")
            sys.exit(1)
            
        # Initialize API client
        client = RedmineAPI(redmine_url, redmine_api_key)
        
        # Try to load validation issues
        if os.path.exists('validation_issues.json'):
            with open('validation_issues.json', 'r') as f:
                validation_data = json.load(f)
                
            master_issue_id = validation_data.get('master_issue_id')
            
            if master_issue_id:
                # Update master issue with release info
                timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                note = f"## Release Information\n\n"
                note += f"**Release**: v${{ github.run_number }}\n"
                note += f"**Timestamp**: {timestamp}\n"
                note += f"**Commit**: ${{ github.sha }}\n"
                note += f"**Branch**: ${{ github.ref }}\n\n"
                note += f"**Status**: Successfully deployed to dev-cloud environment\n"
                
                # Add note
                client.update_issue(master_issue_id, {"notes": note})
                print(f"Updated master validation issue #{master_issue_id} with release info")
        EOF
        
    # Publish to GitHub Packages if running on main or master branch
    - name: Publish Docker image to GitHub Packages
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
      run: |
        # Login to GitHub Container Registry
        echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
        
        # Tag the image for GitHub Container Registry
        docker tag redmine-mcp-server:${{ github.sha }} ghcr.io/${{ github.repository_owner }}/redmine-mcp-server:latest
        docker tag redmine-mcp-server:${{ github.sha }} ghcr.io/${{ github.repository_owner }}/redmine-mcp-server:v${{ github.run_number }}
        
        # Push the images
        docker push ghcr.io/${{ github.repository_owner }}/redmine-mcp-server:latest
        docker push ghcr.io/${{ github.repository_owner }}/redmine-mcp-server:v${{ github.run_number }}