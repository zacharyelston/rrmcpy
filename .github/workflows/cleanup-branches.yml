name: Cleanup Old PRs and Branches

on:
  schedule:
    # Run every Sunday at midnight UTC
    - cron: '0 0 * * 0'
  workflow_dispatch:
    # Allow manual triggering
    inputs:
      dry_run:
        description: 'Dry run (show what would be done without doing it)'
        required: false
        default: 'false'
        type: boolean

permissions:
  contents: write
  pull-requests: write

jobs:
  cleanup-badge-prs:
    runs-on: ubuntu-latest
    name: Cleanup old badge update PRs
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Close old badge update PRs
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Looking for old badge update PRs..."
          
          # Get all open badge update PRs
          BADGE_PRS=$(gh pr list \
            --author "github-actions[bot]" \
            --search "title:\"Update test status badge\"" \
            --state open \
            --json number,title,createdAt,headRefName \
            --limit 100)
          
          # Count PRs
          PR_COUNT=$(echo "$BADGE_PRS" | jq '. | length')
          echo "Found $PR_COUNT badge update PRs"
          
          if [ "$PR_COUNT" -eq "0" ]; then
            echo "No badge update PRs to clean up"
            exit 0
          fi
          
          # Keep only the newest one
          if [ "$PR_COUNT" -gt "1" ]; then
            # Sort by creation date and skip the newest
            OLDEST_PRS=$(echo "$BADGE_PRS" | jq -r 'sort_by(.createdAt) | .[:-1] | .[] | @base64')
            
            for pr_data in $OLDEST_PRS; do
              # Decode the JSON
              PR_JSON=$(echo "$pr_data" | base64 -d)
              PR_NUMBER=$(echo "$PR_JSON" | jq -r '.number')
              PR_BRANCH=$(echo "$PR_JSON" | jq -r '.headRefName')
              
              if [ "${{ inputs.dry_run }}" == "true" ]; then
                echo "[DRY RUN] Would close PR #$PR_NUMBER and delete branch $PR_BRANCH"
              else
                echo "Closing PR #$PR_NUMBER..."
                gh pr close "$PR_NUMBER" --comment "Closing outdated badge update PR. A newer one exists."
                
                # Try to delete the branch
                echo "Deleting branch $PR_BRANCH..."
                git push origin --delete "$PR_BRANCH" 2>/dev/null || echo "  Branch already deleted or protected"
              fi
            done
          else
            echo "Only one badge update PR exists, keeping it open"
          fi

  cleanup-merged-branches:
    runs-on: ubuntu-latest
    name: Cleanup merged branches
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Configure git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
      
      - name: Delete merged branches
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Fetching all branches..."
          git fetch --prune origin
          
          # Get all merged branches (except protected ones)
          MERGED_BRANCHES=$(git branch -r --merged origin/main | 
            grep -v 'main\|master\|develop\|staging\|production\|HEAD' |
            grep -E 'origin/(feature/|fix/|docs/|test/|chore/|update-test-badge-)' |
            sed 's/origin\///')
          
          if [ -z "$MERGED_BRANCHES" ]; then
            echo "No merged branches to clean up"
            exit 0
          fi
          
          echo "Found merged branches:"
          echo "$MERGED_BRANCHES"
          
          # Delete each branch
          for branch in $MERGED_BRANCHES; do
            if [ "${{ inputs.dry_run }}" == "true" ]; then
              echo "[DRY RUN] Would delete branch: $branch"
            else
              echo "Deleting branch: $branch"
              git push origin --delete "$branch" 2>/dev/null || echo "  Failed to delete $branch (may be protected or already deleted)"
            fi
          done
          
  cleanup-stale-branches:
    runs-on: ubuntu-latest
    name: Report stale branches
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Find stale branches
        run: |
          echo "Looking for branches with no activity in 30+ days..."
          
          # Get current date in seconds
          NOW=$(date +%s)
          THIRTY_DAYS_AGO=$((NOW - 2592000))
          
          git fetch --prune origin
          
          STALE_BRANCHES=""
          for branch in $(git branch -r | grep -v 'main\|master\|develop\|staging\|production\|HEAD'); do
            # Get the last commit date
            LAST_COMMIT=$(git log -1 --format=%ct "$branch" 2>/dev/null || echo "0")
            
            if [ "$LAST_COMMIT" -lt "$THIRTY_DAYS_AGO" ]; then
              BRANCH_NAME=$(echo "$branch" | sed 's/origin\///')
              DAYS_OLD=$(( (NOW - LAST_COMMIT) / 86400 ))
              STALE_BRANCHES="${STALE_BRANCHES}\n  - ${BRANCH_NAME} (${DAYS_OLD} days old)"
            fi
          done
          
          if [ -n "$STALE_BRANCHES" ]; then
            echo "Found stale branches (30+ days without commits):"
            echo -e "$STALE_BRANCHES"
            echo ""
            echo "These branches may need manual review before deletion."
          else
            echo "No stale branches found"
          fi
